---
# ansible playbook to setup a ubuntu development box
- hosts: test
  #- hosts: 127.0.0.1
  #connection: local

  vars:
    username: "{{ ansible_user_id }}"
    starship_version: '1.11.0'
    restic_version: '0.13.1'
    bat_version: '0.22.1'
    exa_version: '0.10.0'
    ms_mirror: 'https://packages.microsoft.com'
    jq_version: '1.6'
    yq_version: '4.23.1'
    tfdocs_version: '0.16.0'
    kubectl_version: '1.21.9'
    kubectx_version: '0.9.4'
    kustomize_version: '4.5.5'
    k9s_version: '0.26.3'
    helm_version: '3.9.0'
    dotfiles_repo: 'https://github.com/elmomk/dotfiles.git'
    terraform_lsp: '0.0.12'
    terraform_ls: '0.29.3'
  
  tasks:
  - name: Setup base
    become: true
    tags: base
    block:
    - name: Install specific git ppa repository
      ansible.builtin.apt_repository:
        repo: ppa:git-core/ppa
        state: present
        filename: git

    - name: Install base packages
      ansible.builtin.apt:
        name: [git, curl, wget, python3-pip, python3-venv, apt-transport-https, ca-certificates, software-properties-common, bzip2, unzip, tree, stow, zsh]
        state: latest

    - name: Setup zsh as default shell for user {{ username }}
      ansible.builtin.user:
        name: "{{ username }}"
        shell: /usr/bin/zsh

  - name: Setup Docker
    become: true
    tags: docker
    when: ansible_facts['distribution_major_version'] | int >= 22 # Should not run on WSL and Ubuntu > 22
    block:
    - name: Add Docker apt key - new method
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.asc
        mode: 0644
        force: true

    - name: Configure Docker apt repository
      ansible.builtin.apt_repository:
        repo: deb [signed-by=/etc/apt/keyrings/docker.asc, arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
        state: present
        filename: docker

    - name: Install Docker
      ansible.builtin.apt:
        name: 
        - docker-ce
        - docker-ce-cli
        - containerd.io
        state: latest

    - name: Add user {{ username }} to docker group
      ansible.builtin.user:
       name: "{{ username }}"
       append: true
       groups: 
       - docker

  - name: Cool exotic tools
    become: true
    tags: 
    - base
    - exa
    - bat
    block:
    - name: Install exa package
      ansible.builtin.unarchive:
        src: https://github.com/ogham/exa/releases/download/v{{ exa_version }}/exa-linux-x86_64-v{{ exa_version }}.zip
        dest: /usr/local
        include: [bin/exa]
        mode: 0755
        remote_src: true

    - name: Install bat package (next generation cat)
      ansible.builtin.apt:
        deb: https://github.com/sharkdp/bat/releases/download/v{{ bat_version }}/bat_{{ bat_version  }}_amd64.deb


  - name: Setup Microsoft
    when: ansible_facts['distribution_major_version'] | int >= 22
    become: true
    tags:
    - vscode
    - azcli
    block:
    - name: Install https://packages.microsoft.com key
      ansible.builtin.get_url:
        url: '{{ ms_mirror }}/keys/microsoft.asc'
        dest: /etc/apt/keyrings/microsoft.asc
        mode: 0644
        force: true

    - name: Install https://packages.microsoft.com repo
      become: true
      ansible.builtin.apt_repository:
        repo: 'deb [signed-by=/etc/apt/keyrings/microsoft.asc, arch=amd64] https://packages.microsoft.com/repos/azure-cli {{ ansible_distribution_release }} main'
        filename: azure-cli
        state: present

    - name: Install vscode
      become: true
      ansible.builtin.apt:
        deb: https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64

  - name: cause backups are always nice
    tags:
    - restic
    block:
    - name: Download restic
      ansible.builtin.get_url:
        url: https://github.com/restic/restic/releases/download/v{{ restic_version }}/restic_{{ restic_version }}_linux_amd64.bz2
        dest: /tmp/restic.bz2
        mode: 0755
        force: true
    
    - name: Decompress and copy the binary to /usr/local/bin
      become: true
      ansible.builtin.shell: bunzip2 -c /tmp/restic.bz2 > /usr/local/bin/restic
      args:
        creates: "/usr/local/bin/restic"

    - name: Set permissions on /usr/local/bin/restic
      become: true
      ansible.builtin.file:
        path: /usr/local/bin/restic
        mode: 0755
        owner: root

  - name: Download and install starship.rs
    become: true
    ansible.builtin.unarchive:
      src: https://github.com/starship/starship/releases/download/v{{ starship_version }}/starship-x86_64-unknown-linux-gnu.tar.gz
      dest: /usr/local/bin
      remote_src: true
      mode: 0755
    tags:
    - base
    - starship
    - zsh

  - name: Setup Dotfiles
    block:
    - name: git checkout dotfiles
      ansible.builtin.git:
        repo: "{{ dotfiles_repo }}"
        dest: "/home/{{ username }}/.dotfiles"
      tags:
      - dotfiles
    - name: set dotfiles
      ansible.builtin.shell:
        chdir: "/home/{{ username}}/.dotfiles"
        cmd: "for DOT in zsh starship nvim regolith2_i3;do stow $DOT; done"
      tags:
      - dotfiles

  - name: install latest distrobox
    become: true
    ansible.builtin.shell:
      cmd: "curl -s https://raw.githubusercontent.com/89luca89/distrobox/main/install | sh"

  - name: rigolith #TODO: modular system version
    tags:
    - rigolith
    become: true
    block:
      - name: apt key
        ansible.builtin.apt_key:
          url: "https://regolith-desktop.org/regolith.key"
          keyring: "/usr/share/keyrings/regolith-archive-keyring.gpg"
      - name: add repo
        ansible.builtin.apt_repository:
          repo: deb [signed-by=/usr/share/keyrings/regolith-archive-keyring.gpg, arch=amd64] https://regolith-desktop.org/release-ubuntu-jammy-amd64 jammy main
          filename: rigolith
          state: present
      - name: install basic rigolith
        ansible.builtin.apt:
          name: [regolith-desktop, "regolith-look-*", i3xrocks-focused-window-name, i3xrocks-rofication, i3xrocks-info, i3xrocks-app-launcher, i3xrocks-memory, i3xrocks-battery]
          state: latest
  
  # This task only install the keybase repo and package. You need to run run_keybase to set it up.
  - name: Install keybase
    become: true
    ansible.builtin.apt:
      deb: https://prerelease.keybase.io/keybase_amd64.deb
    tags:
    - keybase

  - name: Setup neovim
    tags:
    - neovim 
    become: true
    block:
    - name: add key
      ansible.builtin.apt_key:
        keyserver: keyserver.ubuntu.com
        id: 9DBB0BE9366964F134855E2255F96FCF8231B6DD  
    - name: add repo
      ansible.builtin.apt_repository:
        repo: ppa:neovim-ppa/unstable
        state: present
        filename: neovim

    - name: install nvim
      ansible.builtin.apt:
        name: 
          - neovim
          - fd-find
          - ripgrep
        state: latest

    - name: Download and install terraform lsp
      ansible.builtin.unarchive:
        src: "https://github.com/juliosueiras/terraform-lsp/releases/download/v{{ terraform_lsp }}/terraform-lsp_{{ terraform_lsp }}_linux_amd64.tar.gz"
        dest: /usr/local/bin
        remote_src: true
        mode: 0755

    - name: Download and install terraform lsp
      ansible.builtin.unarchive:
        src: "https://releases.hashicorp.com/terraform-ls/{{ terraform_ls }}/terraform-ls_{{ terraform_ls }}_linux_amd64.zip"
        dest: /usr/local/bin
        remote_src: true
        mode: 0755
    - name: git checkout nvim plugin packer
      become: false
      ansible.builtin.git:
        repo: 'https://github.com/wbthomason/packer.nvim'
        dest: "/home/{{ username }}/.local/share/nvim/site/pack/packer/start/packer.nvim"
        depth: 1

    - name: old vim clone
      become: false
      ansible.builtin.git:
        repo: "https://github.com/amix/vimrc.git"
        dest: "/home/{{ username }}/.vim_runtime"
        depth: 1
    - name: old vim run
      become: false
      ansible.builtin.shell:
        cmd: "~/.vim_runtime/install_awesome_vimrc.sh"


...
