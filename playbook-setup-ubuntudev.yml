---
# ansible playbook to setup a ubuntu development box
- hosts: 127.0.0.1
  connection: local

  vars:
    ms_mirror: 'https://packages.microsoft.com'
    scw_version: '2.4.0'
    jq_version: '1.6'
    gotask_version: '3.9.2'
    githubcli_version: '1.13.1'
    packer_version: '1.8.0'
    terraform_version: '1.1.7'
    tfdocs_version: '0.16.0'
    kubectl_version: '1.20.4'
    kubectx_version: '0.9.3'
    kustomize_version: '4.1.2'
    kind_version: '0.11.1'
    k3d_version: '5.1.0'
    k9s_version: '0.25.18'
    helm_version: '3.7.1'
    flux_version: '0.16.0'
    calicoctl_version: '3.19.1'
    username: seb
    wsl_install: no
    
  tasks:
  - name: Install base packages
    become: yes
    apt:
      name: [git,curl,wget,python3-pip,python3-venv,apt-transport-https,ca-certificates,software-properties-common,bzip2,unzip,tree,stow]
      state: present
 
  - name: Install zsh
    become: yes
    apt:
      name: zsh
      state: present

  - name: Setup zsh as default shell for user {{ username }}
    become: yes
    user:
      name: "{{ username }}"
      shell: /usr/bin/zsh

  - name: Add Docker apt key
    become: yes
    ansible.builtin.apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present
    when: not wsl_install # Should not run on WSL
 
  - name: Configure Docker apt repository
    become: yes
    ansible.builtin.apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
      state: present
      filename: docker
    when: not wsl_install # Should not run on WSL

  - name: Install Docker
    become: yes
    ansible.builtin.apt:
      name: 
      - docker-ce
      - docker-ce-cli
      - containerd.io
      state: present
    when: not wsl_install # Should not run on WSL

  - name: Install pre-commit with pip
    pip:
      name: pre-commit
  
  - name: Download and install Scaleway CLI version {{ scw_version }}
    become: yes
    get_url:
      url: https://github.com/scaleway/scaleway-cli/releases/download/v{{ scw_version }}/scw-{{ scw_version }}-linux-x86_64
      dest: /usr/local/bin/scw
      mode: 0755
      
  - name: Download and install jq version {{ jq_version }}
    become: yes
    get_url:
      url: https://github.com/stedolan/jq/releases/download/jq-{{ jq_version }}/jq-linux64
      dest: /usr/local/bin/jq
      mode: 0755

  - name: Download and install task version {{ gotask_version }}
    become: yes
    unarchive:
      src: https://github.com/go-task/task/releases/download/v{{ gotask_version }}/task_linux_amd64.tar.gz
      dest: /usr/local/bin
      mode: 0755
      remote_src: yes

  - name: Download Github CLI version {{githubcli_version}}
    become: yes
    unarchive:
      src: https://github.com/cli/cli/releases/download/v{{githubcli_version}}/gh_{{githubcli_version}}_linux_amd64.tar.gz
      dest: /tmp
      mode: 0755
      remote_src: yes
  
  - name: Install Github CLI version {{githubcli_version}} to /usr/local/bin
    become: yes
    copy:
      src: /tmp/gh_{{githubcli_version}}_linux_amd64/bin/gh
      dest: /usr/local/bin
      mode: 0755
      remote_src: yes
  
  - name: Add Hashicorp apt signing key
    become: yes
    ansible.builtin.apt_key:
      url: https://apt.releases.hashicorp.com/gpg
      state: present

  - name: Configure Hashicorp apt repository
    become: yes
    ansible.builtin.apt_repository:
      repo: deb [arch=amd64] https://apt.releases.hashicorp.com {{ ansible_distribution_release }} main
      state: present
      filename: hashicorp

  - name: Install Hashicorp Packer version {{ packer_version }}
    become: yes
    ansible.builtin.apt:
      name: packer={{ packer_version }}
      state: present

  - name: Install Hashicorp Terraform version {{ terraform_version }}
    become: yes
    ansible.builtin.apt:
      name: terraform={{ terraform_version }}
      state: present

  - name: Download and install terraform-docs version {{ tfdocs_version }}
    become: yes
    unarchive:
      src: https://github.com/terraform-docs/terraform-docs/releases/download/v{{ tfdocs_version }}/terraform-docs-v{{ tfdocs_version }}-linux-amd64.tar.gz
      dest: /usr/local/bin
      mode: 0755
      remote_src: yes

  - name: Install https://packages.microsoft.com key
    become: yes
    apt_key:
      url: '{{ ms_mirror }}/keys/microsoft.asc'
      state: present

  - name: Install Azure CLI repo
    become: yes
    apt_repository:
      repo: 'deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli focal main'
      filename: azure-cli
      state: present

  - name: Install Azure CLI 
    become: yes
    apt:
      name: azure-cli
      state: present
      update_cache: yes

  - name: Download and install kubectl version {{ kubectl_version }}
    become: yes
    get_url:
      url: https://storage.googleapis.com/kubernetes-release/release/v{{ kubectl_version }}/bin/linux/amd64/kubectl
      dest: /usr/local/bin/kubectl
      mode: 0755

  - name: Download and install kubectx version {{ kubectx_version }}
    unarchive:
      src: https://github.com/ahmetb/kubectx/releases/download/v{{ kubectx_version }}/kubectx_v{{ kubectx_version }}_linux_x86_64.tar.gz
      dest: /tmp
      remote_src: yes
      mode: 0755

  - name: Copy kubectx binary to /usr/local/bin
    become: yes
    copy:
      src: /tmp/kubectx
      dest: /usr/local/bin
      mode: 0755
      remote_src: yes

  - name: Download kustomize version {{ kustomize_version }}
    unarchive:
      src: https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv{{ kustomize_version }}/kustomize_v{{ kustomize_version }}_linux_amd64.tar.gz
      dest: /tmp
      remote_src: yes
      mode: 0755

  - name: Copy kustomize binary to /usr/local/bin
    become: yes
    copy:
      src: /tmp/kustomize
      dest: /usr/local/bin
      mode: 0755
      remote_src: yes

  - name: Download and install kind version {{ kind_version }}
    become: yes
    get_url:
      url: https://kind.sigs.k8s.io/dl/v{{ kind_version }}/kind-linux-amd64
      dest: /usr/local/bin/kind
      mode: 0755

  - name: Download and install k3d version {{ k3d_version }}
    become: yes
    get_url:
      url: https://github.com/rancher/k3d/releases/download/v{{ k3d_version }}/k3d-linux-amd64
      dest: /usr/local/bin/k3d
      mode: 0755

  - name: Download k9s version {{ k9s_version }}
    unarchive:
      src: https://github.com/derailed/k9s/releases/download/v{{ k9s_version }}/k9s_Linux_x86_64.tar.gz
      dest: /tmp
      remote_src: yes
      mode: 0755

  - name: Copy k9s binary to /usr/local/bin
    become: yes
    copy:
      src: /tmp/k9s
      dest: /usr/local/bin
      mode: 0755
      remote_src: yes

  - name: Download Helm
    unarchive:
      src: https://get.helm.sh/helm-v{{ helm_version }}-linux-amd64.tar.gz
      dest: /tmp
      remote_src: yes
      mode: 0755

  - name: Copy Helm binary to /usr/local/bin
    become: yes
    copy:
      src: /tmp/linux-amd64/helm
      dest: /usr/local/bin
      mode: 0755
      remote_src: yes
  
  - name: Download Flux CLI version {{ flux_version }}
    become: yes
    unarchive:
      src: https://github.com/fluxcd/flux2/releases/download/v{{ flux_version }}/flux_{{ flux_version }}_linux_amd64.tar.gz
      dest: /tmp
      remote_src: yes
      mode: 0755

  - name: Copy flux binary to /usr/local/bin
    become: yes
    copy:
      src: /tmp/flux
      dest: /usr/local/bin
      mode: 0755
      remote_src: yes

  - name: Install calicoctl version {{ calicoctl_version }}
    become: yes
    get_url:
      url: https://github.com/projectcalico/calicoctl/releases/download/v{{ calicoctl_version }}/calicoctl
      dest: /usr/local/bin/calicoctl
      mode: 0755

  - name: Download restic
    get_url:
      url: https://github.com/restic/restic/releases/download/v0.11.0/restic_0.11.0_linux_amd64.bz2
      dest: /tmp/restic.bz2
      force: yes
  
  - name: Decompress and copy the binary to /usr/local/bin
    become: yes
    shell: bunzip2 -c /tmp/restic.bz2 > /usr/local/bin/restic
    args:
      creates: "/usr/local/bin/restic"

  - name: Set permissions on /usr/local/bin/restic
    become: yes
    file:
      path: /usr/local/bin/restic
      mode: 0755
      owner: root

  - name: Install Powerline GO
    become: yes
    apt:
      name: powerline
      state: present

  - name: Configure Powerline GO in .bashrc
    blockinfile:
        path: "/home/{{ username }}/.bashrc"
        backup: yes 
        marker: "# {mark} Powerline configuration"
        state: present
        block: | 
          # Powerline configuration
          if [ -f /usr/share/powerline/bindings/bash/powerline.sh ]; then
            powerline-daemon -q
            POWERLINE_BASH_CONTINUATION=1
            POWERLINE_BASH_SELECT=1
            source /usr/share/powerline/bindings/bash/powerline.sh
          fi
...
